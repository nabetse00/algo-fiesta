/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "dispenser_create(pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dispense(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudXNkY2FfbW9jay5jb250cmFjdC5Vc2RjYU1vY2suYXBwcm92YWxfcHJvZ3JhbToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9lbnRyeXBvaW50QDIKICAgIGNhbGxzdWIgX19pbml0X18KCm1haW5fZW50cnlwb2ludEAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgVXNkY2FNb2NrKEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOAogICAgbWV0aG9kICJkaXNwZW5zZXJfY3JlYXRlKHBheSl1aW50NjQiCiAgICBtZXRob2QgImRpc3BlbnNlKHVpbnQ2NCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9kaXNwZW5zZXJfY3JlYXRlX3JvdXRlQDQgbWFpbl9kaXNwZW5zZV9yb3V0ZUA1CiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX2Rpc3BlbnNlcl9jcmVhdGVfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjgKICAgIC8vIGNsYXNzIFVzZGNhTW9jayhBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weToxNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGRpc3BlbnNlcl9jcmVhdGUKICAgIGl0b2IKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZGlzcGVuc2Vfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjM2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgVXNkY2FNb2NrKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTozNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgZGlzcGVuc2UKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTo4CiAgICAvLyBjbGFzcyBVc2RjYU1vY2soQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyByZWplY3QgdHJhbnNhY3Rpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMudXNkY2FfbW9jay5jb250cmFjdC5Vc2RjYU1vY2suZGlzcGVuc2VyX2NyZWF0ZShwYXlNYnI6IHVpbnQ2NCkgLT4gdWludDY0OgpkaXNwZW5zZXJfY3JlYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MTUtMTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGRpc3BlbnNlcl9jcmVhdGUoc2VsZiwgcGF5TWJyOiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbikgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weToxNwogICAgLy8gYXNzZXJ0IHNlbGYuZGlzcGVuc2VyX3N0YXR1cyA9PSBJTklULCAiY2Fubm90IHJlIHJ1biB0aGlzIG1ldGhvZCIKICAgIGludCAwCiAgICBieXRlICJkaXNwZW5zZXJfc3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBkaXNwZW5zZXJfc3RhdHVzIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIGNhbm5vdCByZSBydW4gdGhpcyBtZXRob2QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjE4CiAgICAvLyBhc3NlcnQgcGF5TWJyLmFtb3VudCA+PSBVSW50NjQoMTAwXzAwMCksICJBc3NldCBNYnIgbm90IG1lZXQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgaW50IDEwMDAwMAogICAgPj0KICAgIGFzc2VydCAvLyBBc3NldCBNYnIgbm90IG1lZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBhcHBfYWRkciA9IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weToyMC0zMAogICAgLy8gYXNzZXRfaXR4biA9IGl0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgYXNzZXRfbmFtZT1iIk1PQ0sgVVNEQ19BIiwKICAgIC8vICAgICB1bml0X25hbWU9YiJNS19VU0RDQSIsCiAgICAvLyAgICAgdG90YWw9U1VQUExZLAogICAgLy8gICAgIGRlY2ltYWxzPTYsCiAgICAvLyAgICAgbWFuYWdlcj1hcHBfYWRkciwKICAgIC8vICAgICByZXNlcnZlPWFwcF9hZGRyLAogICAgLy8gICAgIGNsYXdiYWNrPWFwcF9hZGRyLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MjgKICAgIC8vIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWZhdWx0RnJvemVuCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawogICAgZHVwCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0UmVzZXJ2ZQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjI0CiAgICAvLyBkZWNpbWFscz02LAogICAgaW50IDYKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MjMKICAgIC8vIHRvdGFsPVNVUFBMWSwKICAgIGludCAxODQ0Njc0NDA3MzcwOTU1MTYxNQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weToyMgogICAgLy8gdW5pdF9uYW1lPWIiTUtfVVNEQ0EiLAogICAgYnl0ZSAiTUtfVVNEQ0EiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBhc3NldF9uYW1lPWIiTU9DSyBVU0RDX0EiLAogICAgYnl0ZSAiTU9DSyBVU0RDX0EiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MjAKICAgIC8vIGFzc2V0X2l0eG4gPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgaW50IGFjZmcKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjI5CiAgICAvLyBmZWU9MCwKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MjAtMzAKICAgIC8vIGFzc2V0X2l0eG4gPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIGFzc2V0X25hbWU9YiJNT0NLIFVTRENfQSIsCiAgICAvLyAgICAgdW5pdF9uYW1lPWIiTUtfVVNEQ0EiLAogICAgLy8gICAgIHRvdGFsPVNVUFBMWSwKICAgIC8vICAgICBkZWNpbWFscz02LAogICAgLy8gICAgIG1hbmFnZXI9YXBwX2FkZHIsCiAgICAvLyAgICAgcmVzZXJ2ZT1hcHBfYWRkciwKICAgIC8vICAgICBjbGF3YmFjaz1hcHBfYWRkciwKICAgIC8vICAgICBkZWZhdWx0X2Zyb3plbj1GYWxzZSwKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTozMQogICAgLy8gc2VsZi5hc3NldF9pZCA9IGFzc2V0X2l0eG4uY3JlYXRlZF9hc3NldC5pZAogICAgYnl0ZSAiYXNzZXRfaWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weToyMC0zMAogICAgLy8gYXNzZXRfaXR4biA9IGl0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgYXNzZXRfbmFtZT1iIk1PQ0sgVVNEQ19BIiwKICAgIC8vICAgICB1bml0X25hbWU9YiJNS19VU0RDQSIsCiAgICAvLyAgICAgdG90YWw9U1VQUExZLAogICAgLy8gICAgIGRlY2ltYWxzPTYsCiAgICAvLyAgICAgbWFuYWdlcj1hcHBfYWRkciwKICAgIC8vICAgICByZXNlcnZlPWFwcF9hZGRyLAogICAgLy8gICAgIGNsYXdiYWNrPWFwcF9hZGRyLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MzEKICAgIC8vIHNlbGYuYXNzZXRfaWQgPSBhc3NldF9pdHhuLmNyZWF0ZWRfYXNzZXQuaWQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTozMgogICAgLy8gbG9nKCJNb2NrIFVTRENfQSBjcmVhdGVkIiwgc2VsZi5hc3NldF9pZCwgc2VwPSIgIikKICAgIGludCAwCiAgICBieXRlICJhc3NldF9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgYXNzZXRfaWQgZXhpc3RzCiAgICBpdG9iCiAgICBieXRlICJNb2NrIFVTRENfQSBjcmVhdGVkICIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTozMwogICAgLy8gc2VsZi5kaXNwZW5zZXJfc3RhdHVzID0gVUludDY0KExJVkUpCiAgICBieXRlICJkaXNwZW5zZXJfc3RhdHVzIgogICAgaW50IDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTozNAogICAgLy8gcmV0dXJuIHNlbGYuYXNzZXRfaWQKICAgIGludCAwCiAgICBieXRlICJhc3NldF9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgYXNzZXRfaWQgZXhpc3RzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudXNkY2FfbW9jay5jb250cmFjdC5Vc2RjYU1vY2suZGlzcGVuc2UoYW1vdW50OiB1aW50NjQpIC0+IHZvaWQ6CmRpc3BlbnNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MzYtMzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgZGlzcGVuc2Uoc2VsZiwgYW1vdW50OiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBhc3NlcnQgc2VsZi5kaXNwZW5zZXJfc3RhdHVzID09IExJVkUsICJSdW4gY3JlYXRlIG1ldGhvZCBmaXJzdCIKICAgIGludCAwCiAgICBieXRlICJkaXNwZW5zZXJfc3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBkaXNwZW5zZXJfc3RhdHVzIGV4aXN0cwogICAgaW50IDEKICAgID09CiAgICBhc3NlcnQgLy8gUnVuIGNyZWF0ZSBtZXRob2QgZmlyc3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjM5CiAgICAvLyBhc3NlcnQgYW1vdW50IDwgTUFYX0RJU1BFTlNFLCAiTWF4IGRpc3BlbnNlIGlzIDEwIDAwMCBNb2NrIFVTRENfQSIKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDEwMDAwMDAwMDAwCiAgICA8CiAgICBhc3NlcnQgLy8gTWF4IGRpc3BlbnNlIGlzIDEwIDAwMCBNb2NrIFVTRENfQQogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6NDAKICAgIC8vIGFzc2V0ID0gQXNzZXQoc2VsZi5hc3NldF9pZCkKICAgIGludCAwCiAgICBieXRlICJhc3NldF9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgYXNzZXRfaWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTo0MQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIuaXNfb3B0ZWRfaW4oYXNzZXQpLCAiVXNlciBub3Qgb3B0IGluIgogICAgdHhuIFNlbmRlcgogICAgZGlnIDEKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVXNlciBub3Qgb3B0IGluCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTo0MgogICAgLy8gYXBwX2FkZHIgPSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6NDMtNDkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LmlkLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1hbW91bnQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9zZW5kZXI9YXBwX2FkZHIsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTo0NgogICAgLy8gYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBc3NldFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6NDMKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludCBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6NDgKICAgIC8vIGZlZT0wLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTo0My00OQogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQuaWQsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFzc2V0X3NlbmRlcj1hcHBfYWRkciwKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdXNkY2FfbW9jay9jb250cmFjdC5weTo1MAogICAgLy8gcmV0dXJuCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudXNkY2FfbW9jay5jb250cmFjdC5Vc2RjYU1vY2suX19pbml0X18oKSAtPiB2b2lkOgpfX2luaXRfXzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MTEKICAgIC8vIHNlbGYuZGlzcGVuc2VyX25hbWUgPSBTdHJpbmcoIlVTRENfQSBkaXNwZW5zZXIgbG9jYWxuZXQiKQogICAgYnl0ZSAiZGlzcGVuc2VyX25hbWUiCiAgICBieXRlICJVU0RDX0EgZGlzcGVuc2VyIGxvY2FsbmV0IgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBzZWxmLmFzc2V0X2lkID0gVUludDY0KDApCiAgICBieXRlICJhc3NldF9pZCIKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3VzZGNhX21vY2svY29udHJhY3QucHk6MTMKICAgIC8vIHNlbGYuZGlzcGVuc2VyX3N0YXR1cyA9IFVJbnQ2NChJTklUKQogICAgYnl0ZSAiZGlzcGVuc2VyX3N0YXR1cyIKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudXNkY2FfbW9jay5jb250cmFjdC5Vc2RjYU1vY2suY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91c2RjYV9tb2NrL2NvbnRyYWN0LnB5OjgKICAgIC8vIGNsYXNzIFVzZGNhTW9jayhBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "asset_id": {
          "type": "uint64",
          "key": "asset_id"
        },
        "dispenser_name": {
          "type": "bytes",
          "key": "dispenser_name"
        },
        "dispenser_status": {
          "type": "uint64",
          "key": "dispenser_status"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "UsdcaMock",
    "methods": [
      {
        "name": "dispenser_create",
        "args": [
          {
            "type": "pay",
            "name": "payMbr"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "dispense",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the UsdcaMock smart contract.
 */
export type UsdcaMock = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'dispenser_create(pay)uint64' | 'dispenser_create', {
      argsObj: {
        payMbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payMbr: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }>
    & Record<'dispense(uint64)void' | 'dispense', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      assetId?: IntegerState
      dispenserName?: BinaryState
      dispenserStatus?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type UsdcaMockSig = keyof UsdcaMock['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends UsdcaMockSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the UsdcaMock smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends UsdcaMockSig> = UsdcaMock['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the UsdcaMock smart contract to the method's return type
 */
export type MethodReturn<TSignature extends UsdcaMockSig> = UsdcaMock['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type UsdcaMockCreateCalls = (typeof UsdcaMockCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type UsdcaMockCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type UsdcaMockDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: UsdcaMockCreateCalls) => UsdcaMockCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class UsdcaMockCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the UsdcaMock smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the dispenser_create(pay)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static dispenserCreate(args: MethodArgs<'dispenser_create(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'dispenser_create(pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.payMbr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the dispense(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static dispense(args: MethodArgs<'dispense(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'dispense(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the UsdcaMock smart contract
 */
export class UsdcaMockClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `UsdcaMockClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof UsdcaMock['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the UsdcaMock smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: UsdcaMockDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(UsdcaMockCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the UsdcaMock smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the UsdcaMock smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the dispenser_create(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public dispenserCreate(args: MethodArgs<'dispenser_create(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(UsdcaMockCallFactory.dispenserCreate(args, params))
  }

  /**
   * Calls the dispense(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public dispense(args: MethodArgs<'dispense(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(UsdcaMockCallFactory.dispense(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<UsdcaMock['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get assetId() {
        return UsdcaMockClient.getIntegerState(state, 'asset_id')
      },
      get dispenserName() {
        return UsdcaMockClient.getBinaryState(state, 'dispenser_name')
      },
      get dispenserStatus() {
        return UsdcaMockClient.getIntegerState(state, 'dispenser_status')
      },
    }
  }

  public compose(): UsdcaMockComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      dispenserCreate(args: MethodArgs<'dispenser_create(pay)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.dispenserCreate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      dispense(args: MethodArgs<'dispense(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.dispense(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as UsdcaMockComposer
  }
}
export type UsdcaMockComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the dispenser_create(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dispenserCreate(args: MethodArgs<'dispenser_create(pay)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): UsdcaMockComposer<[...TReturns, MethodReturn<'dispenser_create(pay)uint64'>]>

  /**
   * Calls the dispense(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dispense(args: MethodArgs<'dispense(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): UsdcaMockComposer<[...TReturns, MethodReturn<'dispense(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the UsdcaMock smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): UsdcaMockComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): UsdcaMockComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<UsdcaMockComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<UsdcaMockComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type UsdcaMockComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type UsdcaMockComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
