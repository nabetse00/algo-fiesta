{
    "hints": {
        "start_event(string,account,uint64,uint64,string[],byte[32][],uint64[],uint64[],uint64[],uint64[],pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy_ticket(account,uint64,uint64,byte[32][],pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_asset(account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "un_freeze_asset(account,uint64,byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZXZlbnRfbWFuYWdlci5jb250cmFjdC5FdmVudE1hbmFnZXIuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF9tYW5hZ2VyL2NvbnRyYWN0LnB5OjkzCiAgICAvLyBjbGFzcyBFdmVudE1hbmFnZXIoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "event_begin": {
                    "type": "uint64",
                    "key": "event_begin",
                    "descr": "Event begin timestamp"
                },
                "event_end": {
                    "type": "uint64",
                    "key": "event_end",
                    "descr": "Event end timestamp"
                },
                "event_owner": {
                    "type": "bytes",
                    "key": "event_owner",
                    "descr": "Event owner"
                },
                "event_status": {
                    "type": "uint64",
                    "key": "event_status"
                },
                "last_type_index": {
                    "type": "uint64",
                    "key": "last_type_index"
                },
                "name": {
                    "type": "bytes",
                    "key": "name"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "EventManager",
        "methods": [
            {
                "name": "start_event",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "account",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "begin_ts"
                    },
                    {
                        "type": "uint64",
                        "name": "end_ts"
                    },
                    {
                        "type": "string[]",
                        "name": "tt_urls"
                    },
                    {
                        "type": "byte[32][]",
                        "name": "tt_hash"
                    },
                    {
                        "type": "uint64[]",
                        "name": "tt_prices"
                    },
                    {
                        "type": "uint64[]",
                        "name": "tt_supply"
                    },
                    {
                        "type": "uint64[]",
                        "name": "tt_max_per_user"
                    },
                    {
                        "type": "uint64[]",
                        "name": "tt_sold_amount"
                    },
                    {
                        "type": "pay",
                        "name": "pay"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy_ticket",
                "args": [
                    {
                        "type": "account",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "number_tickets"
                    },
                    {
                        "type": "uint64",
                        "name": "ticket_type_index"
                    },
                    {
                        "type": "byte[32][]",
                        "name": "seats"
                    },
                    {
                        "type": "pay",
                        "name": "pay"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claim_asset",
                "args": [
                    {
                        "type": "account",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "un_freeze_asset",
                "args": [
                    {
                        "type": "account",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    },
                    {
                        "type": "byte[32]",
                        "name": "seat"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}