#pragma version 10

smart_contracts.event_factory.contract.EventFactory.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/event_factory/contract.py:42
    // class EventFactory(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    method "create_event_manager(pay)uint64"
    method "withdraw()void"
    txna ApplicationArgs 0
    match main_create_event_manager_route@4 main_withdraw_route@5
    err // reject transaction

main_create_event_manager_route@4:
    // smart_contracts/event_factory/contract.py:48
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/event_factory/contract.py:42
    // class EventFactory(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/event_factory/contract.py:48
    // @arc4.abimethod
    callsub create_event_manager
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_withdraw_route@5:
    // smart_contracts/event_factory/contract.py:87
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub withdraw
    int 1
    return

main_bare_routing@8:
    // smart_contracts/event_factory/contract.py:42
    // class EventFactory(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.event_factory.contract.EventFactory.create_event_manager(pay: uint64) -> uint64:
create_event_manager:
    // smart_contracts/event_factory/contract.py:48-49
    // @arc4.abimethod
    // def create_event_manager(self, pay: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/event_factory/contract.py:50
    // security_checks(UInt64(2))
    int 2
    callsub security_checks
    // smart_contracts/event_factory/contract.py:52
    // pay.amount
    frame_dig -1
    gtxns Amount
    // smart_contracts/event_factory/contract.py:53-55
    // >= EVENT_CREATION_FEE
    // + EVENT_MANAGER_BOX_MBR
    // + EVENT_MANAGER_CREATOR_BOX_MBR
    int 2029800
    // smart_contracts/event_factory/contract.py:52-55
    // pay.amount
    // >= EVENT_CREATION_FEE
    // + EVENT_MANAGER_BOX_MBR
    // + EVENT_MANAGER_CREATOR_BOX_MBR
    >=
    // smart_contracts/event_factory/contract.py:51-56
    // assert (
    //     pay.amount
    //     >= EVENT_CREATION_FEE
    //     + EVENT_MANAGER_BOX_MBR
    //     + EVENT_MANAGER_CREATOR_BOX_MBR
    // ), "Min fee of 2 algos + mbr on event creation"
    assert // Min fee of 2 algos + mbr on event creation
    // smart_contracts/event_factory/contract.py:57
    // app_addr = Global.current_application_address
    global CurrentApplicationAddress
    // smart_contracts/event_factory/contract.py:58-68
    // response = itxn.ApplicationCall(
    //     approval_program=APPROVAL_BYTES,
    //     clear_state_program=CLEAR_BYTES,
    //     global_num_bytes=2,
    //     global_num_uint=4,
    //     local_num_bytes=0,
    //     local_num_uint=0,
    //     on_completion=OnCompleteAction.NoOp,
    //     fee=0,
    //     extra_program_pages=1,
    // ).submit()
    itxn_begin
    // smart_contracts/event_factory/contract.py:67
    // extra_program_pages=1,
    int 1
    itxn_field ExtraProgramPages
    // smart_contracts/event_factory/contract.py:65
    // on_completion=OnCompleteAction.NoOp,
    int NoOp
    itxn_field OnCompletion
    // smart_contracts/event_factory/contract.py:64
    // local_num_uint=0,
    int 0
    itxn_field LocalNumUint
    // smart_contracts/event_factory/contract.py:63
    // local_num_bytes=0,
    int 0
    itxn_field LocalNumByteSlice
    // smart_contracts/event_factory/contract.py:62
    // global_num_uint=4,
    int 4
    itxn_field GlobalNumUint
    // smart_contracts/event_factory/contract.py:61
    // global_num_bytes=2,
    int 2
    itxn_field GlobalNumByteSlice
    // smart_contracts/event_factory/contract.py:60
    // clear_state_program=CLEAR_BYTES,
    byte 0x0a810143
    itxn_field ClearStateProgramPages
    // smart_contracts/event_factory/contract.py:59
    // approval_program=APPROVAL_BYTES,
    byte 0x0a2009000108200203040605260d0c6576656e745f737461747573000f6c6173745f747970655f696e6465780b6576656e745f6f776e65720b6576656e745f626567696e096576656e745f656e64046e616d650374742d0120036f742d02000003068101020006311840000388077d311b4100cc8004bfe4fc0a8004f91cc3e280046d95748780047140c2538004b7355fd1361a008e050001003d0064007a00930031191444311844361a01570200361a0217c01c361a0317361a0417361a05361a06361a07361a08361a09361a0a3116230949381023124488006e234331191444311844361a0117c01c361a0217361a0317361a04311623094938102312448801d1234331191444311844361a0117c01c361a0217880603234331191444311844361a0117c01c361a0217361a0388066323433119144431184488067a2343311914443118144423438a0b00292104880106320a8bff38074b0112448bff3820320312447301442228654414448bf6320313442b8bf667320781c0d102088bf70c448bf78180a305088bf80c4427048bf76727058bf8678bf92259228b038b020c498c004100758bf95702008b00448b03494e0221040b4b014c594a59210408584c8bfa5702004b01250b25584c8bfb5702004b01240b494e0224584c8bfc5702004b0124584c8bfd5702004b0124584c8bfe5702004c2458800200424f06504f04504f03504f02504c504f02504b014c8800544823088c0342ff8027068bf567222a65448b02082a4c6723880054320a7301448b01098bff3808124480175b4556454e54204d414e414745525d2053746172746564b0898a010032048bff1244312032031244898a020127078bfe8800068bffbf8bff898a02018bff168bfe4c50898a01002228654c494f02448bff1341003e288bff678b001680235b4556454e54204d414e4745525d2053746174757320557064617465642066726f6d204c502708508002746f502708508bff1650b0898a050022470229210488ff79880143320a8bff38074b0112448bff38203203124473014427078bfd88ff7a49880159498bfe22598bfc124449572a08174c573a08178bfc08494f020e4481c8010b81d804082288013a27098bfb88016e4702880172484c570101800131128bfc4c41001e8b08492106594c49154c4f024f02525702008bfd240b2458178bfc088c098b065732088b0916a744800373622d8bfd88ff02498c028bfe8801308cfe1444800361622d8bfd88feec8c00270a8c01228c038b038bfc0c4100468bfe5702008b03494e02250b25588b064922594c49154c494f034f03525702004c5702204f0288015f46028b015702004c16504915240a165706004c508c0123088c0342ffb28b008b018801828b028bfe8801ad8cfe8b078bfd8bfe4f038801d2488cfe8b058b068bfc8802f4320a73014c4e0244572208178bfc0b4c8b0409088bff38080e44898a00008800092228654421051344898a000032074922270565440d410006210588fe3b8922270465448b000e410006210488fe2a89898a01018bffbe44898a02008bfe810a088b00320c0d41002ab12107b2102108b219270bb21e270bb21f8bff8d020003000942000a22b2014200043200b201b342ffce898a02018bfe8bff50898a01028bffbe898a0202222947038bfebe400008228bff8c018c00898b0522598c03228c018b018b030c4100498b055702008b01250b25588c008bff22598c04228c028b028b040c4100228bff5702008b02250b25588b0012410008238bff8c018c00898b0223088c0242ffd68b0123088c0142ffaf228bff8c018c00898a0303320ab18bfeb2288bfdb22723b22449b22c8bffb22ab22922b22323b22280074556542d54434bb22580094576656e74204e4654b2262105b21022b201b3b43c8bfe8bff898a02018bfebe4000088bfe8bffbf42001d8b005702008bff570200504915240a165706004c508bfebc488bfe4cbf8bff4c898a02018bfebe4000088bfe8bffbf42001d8b005702008bff570200504915250a165706004c508bfebc488bfe4cbf8bff4c898a04022229498bfe2259498bff225912448bfcbe400079270a8c00222a654c8c0244228c018b018b020c4100258b0057020080080000000000000000504915240a165706004c508c008b0123088c0142ffd38b03168b004922598bfd0d448bfd240b2104084f025d8bfe152107084916570602270c4c504c8bff150816570602508bfe508bff504c508bfc4cbf4200958b04492106594c49154c494b034f0352495702008bfd240b494e032458178b0308164b0122598bfd0d444f022104084c5d4e024922594c492104594b014f034b02525702008bfe570200504915250a165706004c504e024f03525702008bff570200504915240a165706004c504b01152107084916570602270c4c504c4b02150816570602504f02504c504c508bfcbc488bfc4cbf8bfe8bff8c018c00898a03018bfe573a08178bff08168bfe4c5c3a8cfe8bfd228bfebb8bfe898a020088fd138bfe8bff88001a44320ab18bfeb214b2138bffb21123b2122106b21022b201b3898a02012927098bfe88fd5188fd5744492104594c492106594c4f024f025249224c2259228b048b030c8b028c004100218b015702008b04240b24588bff16a8410006238c004200098b0423088c0442ffd3898a030088fc9a2228654421051244b18bfdb22e22b22f8bfeb22d2108b21022b201b3898a000088fc772228654421051244320a4973004c4e0244497301444f024c09b1222b65444f02b200b207b20823b21022b201b3898a00002706296727042267270522672b3203672822672a226780175b4556454e54204d414e414745525d2043726561746564b089
    itxn_field ApprovalProgramPages
    // smart_contracts/event_factory/contract.py:58
    // response = itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    // smart_contracts/event_factory/contract.py:66
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/event_factory/contract.py:58-68
    // response = itxn.ApplicationCall(
    //     approval_program=APPROVAL_BYTES,
    //     clear_state_program=CLEAR_BYTES,
    //     global_num_bytes=2,
    //     global_num_uint=4,
    //     local_num_bytes=0,
    //     local_num_uint=0,
    //     on_completion=OnCompleteAction.NoOp,
    //     fee=0,
    //     extra_program_pages=1,
    // ).submit()
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/event_factory/contract.py:71
    // response.created_app.id,
    dup
    itob
    byte "Create manager: event "
    swap
    concat
    // smart_contracts/event_factory/contract.py:74
    // sep=" ",
    byte " "
    // smart_contracts/event_factory/contract.py:72
    // "from",
    concat
    byte "from"
    concat
    // smart_contracts/event_factory/contract.py:74
    // sep=" ",
    byte " "
    // smart_contracts/event_factory/contract.py:73
    // Txn.sender,
    concat
    txn Sender
    concat
    // smart_contracts/event_factory/contract.py:69-75
    // log(
    //     "Create manager: event",
    //     response.created_app.id,
    //     "from",
    //     Txn.sender,
    //     sep=" ",
    // )
    log
    // smart_contracts/event_factory/contract.py:76-81
    // itxn.Payment(
    //     amount=1_000_000,
    //     receiver=response.created_app.address,
    //     sender=app_addr,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/event_factory/contract.py:78
    // receiver=response.created_app.address,
    dup
    app_params_get AppAddress
    assert // application exists
    uncover 2
    itxn_field Sender
    itxn_field Receiver
    // smart_contracts/event_factory/contract.py:77
    // amount=1_000_000,
    int 1000000
    itxn_field Amount
    // smart_contracts/event_factory/contract.py:76
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/event_factory/contract.py:80
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/event_factory/contract.py:76-81
    // itxn.Payment(
    //     amount=1_000_000,
    //     receiver=response.created_app.address,
    //     sender=app_addr,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/event_factory/contract.py:82
    // log("Transfered 0.1 Algos to", response.created_app.address, sep=" ")
    dup
    app_params_get AppAddress
    assert // application exists
    byte "Transfered 0.1 Algos to "
    swap
    concat
    log
    // smart_contracts/event_factory/contract.py:83
    // self.add_event_manager_boxes(response.created_app.id, Txn.sender)
    dup
    txn Sender
    callsub add_event_manager_boxes
    // smart_contracts/event_factory/contract.py:84
    // self.last_event_manager += 1
    int 0
    byte "last_event_manager"
    app_global_get_ex
    assert // check last_event_manager exists
    int 1
    +
    byte "last_event_manager"
    swap
    app_global_put
    // smart_contracts/event_factory/contract.py:85
    // return response.created_app.id
    retsub


// smart_contracts.event_factory.contract.security_checks(txn_number: uint64) -> void:
security_checks:
    // smart_contracts/event_factory/contract.py:124-128
    // ######################
    // # Global subroutines #
    // ######################
    // @subroutine
    // def security_checks(txn_number: UInt64) -> None:
    proto 1 0
    // smart_contracts/event_factory/contract.py:129
    // assert Global.group_size == txn_number, "Wrong group size"
    global GroupSize
    frame_dig -1
    ==
    assert // Wrong group size
    // smart_contracts/event_factory/contract.py:130
    // assert Txn.rekey_to == Global.zero_address, "Wrong rekey to"
    txn RekeyTo
    global ZeroAddress
    ==
    assert // Wrong rekey to
    retsub


// smart_contracts.event_factory.contract.EventFactory.add_event_manager_boxes(app_id: uint64, creator: bytes) -> void:
add_event_manager_boxes:
    // smart_contracts/event_factory/contract.py:111-113
    // # boxes
    // @subroutine
    // def add_event_manager_boxes(self, app_id: UInt64, creator: Account) -> None:
    proto 2 0
    // smart_contracts/event_factory/contract.py:115
    // Bytes(EVENT_MANAGER_BOX_PREFIX), self.last_event_manager
    int 0
    byte "last_event_manager"
    app_global_get_ex
    assert // check last_event_manager exists
    byte "em-"
    // smart_contracts/event_factory/contract.py:114-116
    // key_event = self.box_key_from_uint64(
    //     Bytes(EVENT_MANAGER_BOX_PREFIX), self.last_event_manager
    // )
    swap
    callsub box_key_from_uint64
    // smart_contracts/event_factory/contract.py:118
    // Bytes(EVENT_MANAGER_CREATOR_BOX_PREFIX), self.last_event_manager
    int 0
    byte "last_event_manager"
    app_global_get_ex
    assert // check last_event_manager exists
    byte "ce-"
    // smart_contracts/event_factory/contract.py:117-119
    // key_creator = self.box_key_from_uint64(
    //     Bytes(EVENT_MANAGER_CREATOR_BOX_PREFIX), self.last_event_manager
    // )
    swap
    callsub box_key_from_uint64
    // smart_contracts/event_factory/contract.py:120
    // op.Box.put(key_event, op.itob(app_id))
    frame_dig -2
    itob
    uncover 2
    swap
    box_put
    // smart_contracts/event_factory/contract.py:121
    // op.Box.put(key_creator, creator.bytes)
    frame_dig -1
    box_put
    retsub


// smart_contracts.event_factory.contract.EventFactory.box_key_from_uint64(prefix: bytes, index: uint64) -> bytes:
box_key_from_uint64:
    // smart_contracts/event_factory/contract.py:99-104
    // ################
    // # Box handlers #
    // ################
    // # general
    // @subroutine
    // def box_key_from_uint64(self, prefix: Bytes, index: UInt64) -> Bytes:
    proto 2 1
    // smart_contracts/event_factory/contract.py:105
    // return op.concat(prefix, op.itob(index))
    frame_dig -1
    itob
    frame_dig -2
    swap
    concat
    retsub


// smart_contracts.event_factory.contract.EventFactory.withdraw() -> void:
withdraw:
    // smart_contracts/event_factory/contract.py:87-88
    // @arc4.abimethod
    // def withdraw(self) -> None:
    proto 0 0
    // smart_contracts/event_factory/contract.py:89
    // app_addr = Global.current_application_address
    global CurrentApplicationAddress
    // smart_contracts/event_factory/contract.py:90
    // amount = app_addr.balance - app_addr.min_balance
    dup
    acct_params_get AcctBalance
    swap
    cover 2
    assert // account funded
    dup
    acct_params_get AcctMinBalance
    assert // account funded
    uncover 2
    swap
    -
    // smart_contracts/event_factory/contract.py:91-96
    // itxn.Payment(
    //     amount=amount,
    //     receiver=self.factory_owner,
    //     sender=app_addr,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/event_factory/contract.py:93
    // receiver=self.factory_owner,
    int 0
    byte "factory_owner"
    app_global_get_ex
    assert // check factory_owner exists
    uncover 2
    itxn_field Sender
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/event_factory/contract.py:91
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/event_factory/contract.py:95
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/event_factory/contract.py:91-96
    // itxn.Payment(
    //     amount=amount,
    //     receiver=self.factory_owner,
    //     sender=app_addr,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/event_factory/contract.py:97
    // return
    retsub


// smart_contracts.event_factory.contract.EventFactory.__init__() -> void:
__init__:
    // smart_contracts/event_factory/contract.py:43
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/event_factory/contract.py:44
    // self.last_event_manager = UInt64(0)
    byte "last_event_manager"
    int 0
    app_global_put
    // smart_contracts/event_factory/contract.py:45
    // self.factory_owner = Txn.sender
    byte "factory_owner"
    txn Sender
    app_global_put
    // smart_contracts/event_factory/contract.py:46
    // log(FACTORY_APP_CREATED)
    byte "Event Factory created"
    log
    retsub
